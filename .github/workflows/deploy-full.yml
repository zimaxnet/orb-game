name: Deploy Full Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BACKEND_RESOURCE_GROUP: orb-game-rg-eastus2
  FRONTEND_RESOURCE_GROUP: orb-game-rg-eastus2
  BACKEND_CONTAINER_APP: orb-game-backend-eastus2
  FRONTEND_WEB_APP: orb-game
  ACR_NAME: orbgameregistry
  BACKEND_IMAGE: orb-game-backend
  FRONTEND_IMAGE: orb-game-frontend

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.ACR_NAME }}
        
    - name: Build and push container image
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }} \
          --tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest \
          --file backend/backend-Dockerfile \
          --push \
          .
          
    - name: Deploy to Azure Container Apps
      run: |
        az containerapp update \
          --name ${{ env.BACKEND_CONTAINER_APP }} \
          --resource-group ${{ env.BACKEND_RESOURCE_GROUP }} \
          --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:${{ github.sha }} \
          --set-env-vars \
            AZURE_OPENAI_ENDPOINT="https://aimcs-foundry.cognitiveservices.azure.com/" \
            AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            AZURE_OPENAI_DEPLOYMENT="${{ secrets.AZURE_OPENAI_DEPLOYMENT }}" \
            AZURE_OPENAI_TTS_DEPLOYMENT="${{ secrets.AZURE_OPENAI_TTS_DEPLOYMENT }}" \
            PERPLEXITY_API_KEY="${{ secrets.PERPLEXITY_API_KEY }}" \
            MONGO_URI="${{ secrets.MONGO_URI }}"
            
    - name: Wait for backend deployment
      run: |
        echo "Waiting for backend deployment to complete..."
        sleep 90
        
    - name: Verify backend health
      run: |
        for i in {1..10}; do
          echo "Attempt $i: Testing backend health..."
          if curl -f https://api.orbgame.us/health; then
            echo "‚úÖ Backend is healthy!"
            break
          else
            echo "‚ùå Backend not responding, waiting..."
            sleep 30
          fi
        done
        
        curl -f https://api.orbgame.us/health || exit 1

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    name: Deploy Frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Build frontend
      run: |
        npm run build
        
    - name: Zip build output
      run: |
        cd dist
        zip -r ../dist.zip .
        cd ..
        
    - name: Verify build output
      run: |
        ls -la dist/
        test -f dist/index.html || exit 1
        test -f dist.zip || exit 1
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Web App
      run: |
        # Deploy to Azure Web App using newer command
        az webapp deploy \
          --resource-group ${{ env.FRONTEND_RESOURCE_GROUP }} \
          --name ${{ env.FRONTEND_WEB_APP }} \
          --src-path dist.zip
        
        # Restart the web app to ensure changes propagate
        echo "üîÑ Restarting web app to ensure changes propagate..."
        az webapp restart --name ${{ env.FRONTEND_WEB_APP }} --resource-group ${{ env.FRONTEND_RESOURCE_GROUP }}
        
        # Clear any cached content
        echo "üßπ Clearing cached content..."
        az webapp config appsettings set --name ${{ env.FRONTEND_WEB_APP }} --resource-group ${{ env.FRONTEND_RESOURCE_GROUP }} --settings WEBSITE_DYNAMIC_CACHE=0
        az webapp config appsettings set --name ${{ env.FRONTEND_WEB_APP }} --resource-group ${{ env.FRONTEND_RESOURCE_GROUP }} --settings WEBSITE_DYNAMIC_CACHE=1
        
    - name: Wait for frontend deployment
      timeout-minutes: 10
      run: |
        echo "Waiting for frontend deployment to complete..."
        sleep 180
        
    - name: Verify frontend deployment
      timeout-minutes: 15
      run: |
        echo "Verifying frontend deployment..."
        
        # Get Web App URL
        WEB_APP_URL=$(az webapp show --name ${{ env.FRONTEND_WEB_APP }} --resource-group ${{ env.FRONTEND_RESOURCE_GROUP }} --query "defaultHostName" --output tsv)
        echo "üåê Web App URL: https://$WEB_APP_URL"
        
        # Check if the site is serving our content with more attempts and longer waits
        for i in {1..10}; do
          echo "Attempt $i/10: Checking frontend content..."
          RESPONSE=$(curl -s --max-time 30 https://$WEB_APP_URL)
          
          # Check for multiple indicators of our content
          if echo "$RESPONSE" | grep -q "Orb Game" || \
             echo "$RESPONSE" | grep -q "orbgame" || \
             echo "$RESPONSE" | grep -q "AI Multimodal Gaming System" || \
             echo "$RESPONSE" | grep -q "main.jsx" || \
             echo "$RESPONSE" | grep -q "favicon.svg"; then
            echo "‚úÖ Frontend is serving our content!"
            break
          else
            echo "‚ùì Unknown response, waiting 60 seconds..."
            echo "Response preview:"
            echo "$RESPONSE" | head -15
            sleep 60
          fi
        done
        
        # Final verification with more detailed output
        echo "üîç Final verification..."
        FINAL_RESPONSE=$(curl -s --max-time 30 https://$WEB_APP_URL)
        
        # Check for multiple indicators of our content
        if echo "$FINAL_RESPONSE" | grep -q "Orb Game" || \
           echo "$FINAL_RESPONSE" | grep -q "orbgame" || \
           echo "$FINAL_RESPONSE" | grep -q "AI Multimodal Gaming System" || \
           echo "$FINAL_RESPONSE" | grep -q "main.jsx" || \
           echo "$FINAL_RESPONSE" | grep -q "favicon.svg"; then
          echo "‚úÖ Frontend deployment verified!"
          echo "üìÑ Content indicators found:"
          echo "$FINAL_RESPONSE" | grep -E "(Orb Game|orbgame|AI Multimodal Gaming System|main.jsx|favicon.svg)" | head -5
        else
          echo "‚ùå Frontend deployment verification failed"
          echo "üìÑ Full response for debugging:"
          echo "$FINAL_RESPONSE" | head -30
          echo "üîç Checking if site is accessible at all..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$WEB_APP_URL)
          echo "HTTP Status: $HTTP_STATUS"
          echo "üîç Checking for any HTML content..."
          if echo "$FINAL_RESPONSE" | grep -q "<!doctype html\|<html\|<head\|<body"; then
            echo "‚úÖ HTML structure detected, but missing expected content"
          else
            echo "‚ùå No HTML structure detected"
          fi
          exit 1
        fi

  system-test:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    name: System Integration Test
    
    steps:
    - name: Test frontend accessibility
      timeout-minutes: 5
      run: |
        echo "Testing frontend..."
        curl -f https://orbgame.us || exit 1
        
    - name: Test backend API
      timeout-minutes: 5
      run: |
        echo "Testing backend API..."
        curl -f https://api.orbgame.us/health || exit 1
        
    - name: Test full chat flow
      timeout-minutes: 10
      run: |
        echo "Testing complete chat flow..."
        
        # Test chat endpoint
        RESPONSE=$(curl -s -X POST https://api.orbgame.us/api/chat \
          -H "Content-Type: application/json" \
          -d '{"message": "Hello, this is a deployment test"}')
          
        if echo "$RESPONSE" | grep -q "response"; then
          echo "‚úÖ Chat API working correctly"
        else
          echo "‚ùå Chat API failed"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
    - name: Test web search functionality
      timeout-minutes: 10
      run: |
        echo "Testing web search..."
        
        RESPONSE=$(curl -s -X POST https://api.orbgame.us/api/chat \
          -H "Content-Type: application/json" \
          -d '{"message": "What is the latest news today?", "useWebSearch": "auto"}')
          
        if echo "$RESPONSE" | grep -q "response"; then
          echo "‚úÖ Web search working correctly"
        else
          echo "‚ùå Web search failed"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
    - name: Test historical figures system functionality
      timeout-minutes: 10
      run: |
        echo "Testing historical figures system..."
        
        # Test historical figures endpoint with retry logic
        echo "üß™ Testing historical figures endpoint with retry logic..."
        HISTORICAL_FIGURES=""
        for i in {1..3}; do
          echo "Attempt $i/3: Testing historical figures endpoint..."
          HISTORICAL_FIGURES=$(curl -s --max-time 30 "https://api.orbgame.us/api/orb/historical-figures/Technology?count=1&epoch=Modern&language=en")
          
          if echo "$HISTORICAL_FIGURES" | grep -q "headline"; then
            echo "‚úÖ Historical figures endpoint working on attempt $i"
            break
          else
            echo "‚ùå Historical figures endpoint failed on attempt $i"
            echo "Response: $HISTORICAL_FIGURES"
            if [ $i -lt 3 ]; then
              echo "‚è≥ Waiting 20 seconds before retry..."
              sleep 20
            fi
          fi
        done
        
        if ! echo "$HISTORICAL_FIGURES" | grep -q "headline"; then
          echo "‚ùå Historical figures endpoint failed after all retries"
          echo "Final response: $HISTORICAL_FIGURES"
          echo "üîç Checking if backend is accessible..."
          BACKEND_HEALTH=$(curl -s --max-time 10 https://api.orbgame.us/health)
          echo "Backend health: $BACKEND_HEALTH"
          exit 1
        else
          echo "‚úÖ Historical figures endpoint working correctly"
        fi
        
        # Test different epochs to ensure story generation works
        echo "üß™ Testing multiple epochs..."
        EPOCHS=("Ancient" "Medieval" "Industrial" "Modern" "Future")
        for epoch in "${EPOCHS[@]}"; do
          echo "Testing $epoch epoch..."
          EPOCH_TEST=$(curl -s --max-time 30 "https://api.orbgame.us/api/orb/historical-figures/Technology?count=1&epoch=$epoch&language=en")
          if echo "$EPOCH_TEST" | grep -q "headline"; then
            echo "‚úÖ $epoch epoch working"
          else
            echo "‚ö†Ô∏è $epoch epoch may not have stories available"
          fi
        done
        
        echo "üé≠ Historical figures system test completed"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, system-test]
    if: always()
    name: Deployment Summary
    
    steps:
    - name: Deployment status
      run: |
        if [ ${{ needs.deploy-backend.result }} == 'success' ] && \
           [ ${{ needs.deploy-frontend.result }} == 'success' ] && \
           [ ${{ needs.system-test.result }} == 'success' ]; then
          echo "üéâ Full deployment successful!"
          echo "Frontend: https://orbgame.us"
          echo "Backend: https://api.orbgame.us"
          echo "Historical Figures System: ‚úÖ Active"
          echo "Story Generation: üé≠ Working across all epochs"
          echo "API Endpoints: /api/orb/historical-figures/*"
          echo "Commit: ${{ github.sha }}"
        else
          echo "‚ùå Deployment failed!"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "System Test: ${{ needs.system-test.result }}"
          exit 1
        fi 